<?php
class TopicsController extends AppController {

        //var $components = array('Auth', 'Facebook.Connect', 'Session', 'Commentusernumber');
	//var $components = array('Auth', 'Facebook.Connect', 'Session','RequestHandler');
        public $name = 'Topics';
//        var $helpers = array('Html', 'Form', 'NiceNumber', 'Session');
        var $helpers = array('Html', 'Form', 'Session', 'Facebook.Facebook');
	var $layout = 'topic';
        public $uses = array('Topic','Content','Title','Comment','User');
//        var $uses = array('Topic', 'User', 'Comment','Commentgood', 'Mastercategory','Relatedtopic','Task','Content');
        //var $components = array('Logincheck');
	public $components = array(
               'Session',
                'Auth' => array(
                        'authenticate' => array(
                                'Form' => array(
                                        'fields' => array('username' => 'email')
                                )
                        ),
                'authorize' => 'Controller'),
                'Facebook.Connect' => array('model' => 'User')
        );


        function beforeFilter() {
		CakePlugin::load('Facebook');

                //show the page without login
                $this->Auth->allow('*');
	}


/////////////////////////////////////////////////////////////
/////////  Create Topics ////////////////////////////////////
////////////////////////////////////////////////////////////
	function show_topic(){
		$isAuthenticated = $this->Session->read('Auth.User');
		$isInvited = TRUE;
		//set user info to the view
		$this->set('auth', $isAuthenticated);

		$topic_id = $this->params['named']['topicid'];

		$topic_array = $this->Topic->find('all', array('conditions' => array('Topic.id' => $topic_id)));


		//Topic Array for all
		$this->set('topics', $topic_array);

		//Topic Title
		$this->set('topictitle', $topic_array[0]['Topic']['name']);

		//Get User Info
		$topic_array_pic = $this->User->find('all', array('conditions' => array('User.id' => $topic_array[0]['Topic']['user_id']),'recursibe' => -2));
		$this->set('topic_user_pic', $topic_array_pic);


		//size of items
		$item_num = count($topic_array[0]['Comment']);

		//first contents
		foreach($topic_array as $each_topics){
			//Each Title
			$i=0;
			$title_array=array();
			foreach($each_topics['Title'] as $each_title){
				$title_array[$i]=$each_title;
				$i++;
			}
			//Each Content
			$j=0;
			$content_array=array();
			foreach($each_topics['Content'] as $each_content){
				$content_array[$j]=$each_content;
				$j++;
			}
			//Each Commen
			$t=0;
			$comment_array=array();
			foreach($each_topics['Comment'] as $each_comment){
				$comment_array[$t]=$each_comment;
				$t++;
			}
		}


		//combine the three arrays into one array
		$show_array=array();
		for($l = 0; $l < $item_num; $l++){
			$show_array[$l]=array($title_array[$l]['title'],$content_array[$l]['content'],$comment_array[$l]['comment']);
		}

		$this->set('show_contents',$show_array);


/*
echo "<PRE>";
var_dump($show_array);
echo "</PRE>";
*/


	}


/////////////////////////////////////////////////////////////
/////////  Create Topics ////////////////////////////////////
////////////////////////////////////////////////////////////
	function create(){
		$this->layout = 'topiccreate';

		$me_array = $this->Session->read('Auth.User');
		$me = $me_array['id'];

		$result;
		$titleresult;
		$topicid;
		$titleid;
//debug($this->params);
//debug($this->data);

		//if edit page, get the contents
		if(!empty($this->params['named']['topicid'])){
			$topicid = $this->params['named']['topicid'];
			$topic_array = array();
			$topic_array = $this->Topic->find('all', array('conditions' => array('Topic.id' => $topicid)));
			$edit_result = $this->_get_editcontents($topic_array);
			$this->set('editing_contents',$edit_result);

			$data['id']=$topicid;

			if(!empty($this->data)){
				$this->_save_data($this->data,$me,$topicid,$topic_array);
			}
		}else{
			if(!empty($this->data)){
				//New Topic
				$this->_save_data($this->data,$me,"","");
			}
		}
	}


	function _save_data($datacontents,$me,$topic_id,$orgcontents){
		if(!empty($orgcontents)){
			$orgtitlearray=array();
			$orgcontentarray=array();
			$orgcommentarray=array();
			$orgdatacontents=$orgcontents;



/*
echo "<PRE>";
var_dump($datacontents);
echo "</PRE>";
*/


/*
echo "<PRE>";
var_dump($orgcontents);
echo "</PRE>";
*/

			/// original Topic title,category,description ///
			$orgdata['id']=$orgcontents[0]['Topic']['id'];
			$orgdata['user_id']=$orgcontents[0]['Topic']['user_id'];
			$orgdata['name']=$orgcontents[0]['Topic']['name'];
			$orgdata['category']=$orgcontents[0]['Topic']['category'];
			$orgdata['description']=$orgcontents[0]['Topic']['description'];

			/// new Topic title,category,description, if there are ///
			$data['id']=$topic_id;
			$data['user_id']=$me;
			$data['name']=$datacontents["Topic_Title"];
			$data['category']=$datacontents["Topic_Category"];
			$data['description']=$datacontents["Topic_Description"];

			$isnewtopicinfo=array_diff($data,$orgdata);
			if(!empty($isnewtopicinfo)){
				//save Topic name and category to DB
				$result = $this->Topic->save($data);
			}


			/// make org content array in order to compare the new content array
			foreach($orgcontents as $orgcontent){
				foreach($orgcontent['Title'] as $orgtitles){
					array_push($orgtitlearray,$orgtitles['title']);
				}

				$r=1;
				foreach($orgcontent['Content'] as $orgcontents){
					$orgcontentarray[$r][$r]=$orgcontents['content'];
					$r++;
				}

				foreach($orgcontent['Comment'] as $orgcomments){
					array_push($orgcommentarray,$orgcomments['comment']);
				}


/*
echo "<PRE>";
var_dump($orgtitlearray);
echo "</PRE>";
echo "<PRE>";
var_dump($orgcontentarray);
echo "</PRE>";
echo "<PRE>";
var_dump($orgcommentarray);
echo "</PRE>";

echo "ue orginal sita new contents<br><br>";

echo "<PRE>";
var_dump($datacontents['Content']['title']);
echo "</PRE>";
echo "<PRE>";
var_dump($datacontents['Content']['content']);
echo "</PRE>";
echo "<PRE>";
var_dump($datacontents['Content']['comment']);
echo "</PRE>";
*/

			}

			$topicid = $orgdata['id'];


			//Compare the old title array and new title array, and if new titles are added, update the DB
			$isnewtitle=array_diff($datacontents['Content']['title'],$orgtitlearray);
			if(!empty($isnewtitle)){
                                //save Topic name and category to DB
                        	$i=1;
				foreach($datacontents["Content"]["title"] as $key=>$title)
				{
					if($title === "disabled"){
						$deletetitleid = $orgdatacontents[0]['Title'][$key-1]['id'];
						$this->Title->delete($deletetitleid);
					}else{
						if(!empty($orgdatacontents[0]['Title'][$key-1]['id'])){
							$titleid =$orgdatacontents[0]['Title'][$key-1]['id']; 
						}else{
							$titleid = NULL;
						}

						$this->Title->create();
						$data["id"]=$titleid;
						$data["topic_id"]=$topicid;
						//$data["content_id"]=$key;
						$data["content_id"]=$i;
						$data["title"]=$title;
						//$data["user_id"]=$orgdata["user_id"];
						$data["user_id"]=$me;
						$this->Title->save($data);

						$i++;
					}
				}
			}


			$isnewcontent=$this->_getcontentdiff($datacontents['Content']['content'],$orgcontentarray);
			if(!empty($isnewcontent)){
				$l=1;
				//foreach($this->data["Content"]["content"] as $key=>$content)
				foreach($datacontents["Content"]["content"] as $key=>$content)
				{
					foreach($content as $k=>$con)
					{
						if($con === "disabled"){
							$deletecontentid = $orgdatacontents[0]['Content'][$key-1]['id'];
							$this->Content->delete($deletecontentid);
						}else{

							if(!empty($orgdatacontents[0]['Content'][$key-1]['id'])){
								$contentid =$orgdatacontents[0]['Content'][$key-1]['id']; 
							}else{
								$contentid = NULL;
							}

							$this->Content->create();
							$data["id"]=$contentid;
							$data["topic_id"]=$topicid;
							//$data["content_id"]=$key;
							$data["content_id"]=$l;
							//$data["content_id"]=$k; -> this is for sub number of contents: in case many text in each content
							$data["content"]=$con;
							//$data["user_id"]=$data["user_id"];
							$data["user_id"]=$me;
							$this->Content->save($data);

							$l++;
						}
					}
				}
			}


			$isnewcomment=array_diff($datacontents['Content']['comment'],$orgcommentarray);
			if(!empty($isnewcomment)){
				$j=1;
				foreach($datacontents["Content"]["comment"] as $key=>$comment)
				{
					if($comment === "disabled"){
						$deletecommentid = $orgdatacontents[0]['Comment'][$key-1]['id'];
						$this->Comment->delete($deletecommentid);
					}else{
						if(!empty($orgdatacontents[0]['Comment'][$key-1]['id'])){
							$commentid =$orgdatacontents[0]['Comment'][$key-1]['id']; 
						}else{
							$commentid = NULL;
						}
						$this->Comment->create();
						$data["id"]=$commentid;
						$data["topic_id"]=$topicid;
						//$data["content_id"]=$key;
						$data["content_id"]=$j;
						if($comment === "Comment"){
							$data["comment"]="";
						}
						else{
							$data["comment"]=$comment;
						}
						//$data["user_id"]=$data["user_id"];
						$data["user_id"]=$me;
						$this->Comment->save($data);

						$j++;
					}
				}
			}





/*
echo "<PRE>";
var_dump($orgdata);
echo "</PRE>";

echo "<PRE>";
var_dump($data);
echo "</PRE>";
*/
		}
		else{
			///  NEW Creat Topic ////
			//get contents form FORM
			if(!empty($datacontents))
			{
				//$data['user_id']=$this->data["Topic"]["user_id"];
				$data['id']=$topic_id;
				$data['user_id']=$me;
				$data['name']=$this->data["Topic_Title"];
				$data['category']=$this->data["Topic_Category"];
				$data['description']=$this->data["Topic_Description"];

				//save Topic name and category to DB
				$result = $this->Topic->save($data);

				$topicid = $result['Topic']['id'];


				$i=1;
				//foreach($this->data["Content"]["title"] as $key=>$title)
				foreach($datacontents["Content"]["title"] as $key=>$title)
				{
					if($title === "disabled"){
//						$this->Title->delete($topicid);
//						$this->Title->save($data);
					}else{
						$this->Title->create();
						$data["topic_id"]=$topicid;
						//$data["content_id"]=$key;
						$data["content_id"]=$i;
						$data["title"]=$title;
						$data["user_id"]=$data["user_id"];
						$this->Title->save($data);

						$i++;
					}
				}
	
				$j=1;
				//foreach($this->data["Content"]["comment"] as $key=>$comment)
				foreach($datacontents["Content"]["comment"] as $key=>$comment)
				{
					if($comment === "disabled"){
//              	                        $this->Title->delete($topicid);
//						$this->Comment->save($data);
					}else{
					$this->Comment->create();
					$data["topic_id"]=$topicid;
					//$data["content_id"]=$key;
					$data["content_id"]=$j;
						if($comment === "Comment"){
							$data["comment"]="";
						}
						else{
							$data["comment"]=$comment;
						}
						$data["user_id"]=$data["user_id"];
						$this->Comment->save($data);

						$j++;
					}
				}

				$l=1;
				//foreach($this->data["Content"]["content"] as $key=>$content)
				foreach($datacontents["Content"]["content"] as $key=>$content)
				{
					foreach($content as $k=>$con)
					{
						if($con === "disabled"){

						//	$this->Content->save($data);
						}else{
							$this->Content->create();
							$data["topic_id"]=$topicid;
							//$data["content_id"]=$key;
							$data["content_id"]=$l;
							//$data["content_id"]=$k; -> this is for sub number of contents: in case many text in each content
							$data["content"]=$con;
							$data["user_id"]=$data["user_id"];
							$this->Content->save($data);

							$l++;
						}
					}
				}
			}// end of if
		}// end of else

		$this->redirect(array('controller'=>'Users','action'=>'show_users','id'=>$me));
	}

	function _getcontentdiff($oldarray,$newarray){
		/// compare the old array of content and the new array of content
		$ocontarray = $ncontarray = array("");

		foreach($oldarray as $oconts){
			foreach($oconts as $ocont){
				array_unshift($ocontarray,$ocont);
			}
		}

		foreach($newarray as $nconts){
			foreach($nconts as $ncont){
				array_unshift($ncontarray,$ncont);
			}
		}

		return array_diff($ocontarray,$ncontarray);
	}



function image(){
	$this->request->data;
	if ($this->request->is('ajax')) {
		// Configure for ajax
		Configure::write('debug', 0);
		$this->autoRender = false;
		// Output
		$targettext = $this->data['input_text'];
		$number_perpage = $this->data['number_perpage'];
		$page_num = $this->data['page'];
		if(empty($page_num)){
			$page_num = 1;
		}
	}

	//Flickr
	App::import('Vendor', 'phpFlickr');
		$name = 'Flickr';
		$uses = array();
		$api_key = 'f76419f89a15fe062743699e01aa217b';
		$secret = '0beda1df1625f560';
		$flickr = new phpFlickr($api_key, $secret);
		$result = $flickr->photos_search(array(
			"text" => $targettext,
			"per_page" => $number_perpage,
			"page" => $page_num,
			"license" => "1,2,3,4,5,6",
			"extras" => "owner_name",
			//"sort" => 'relevant'
			"sort" => 'interestingness-asc'
		));


		$target_url = null;
		foreach ($result['photo'] as $photo) {
			$target_url = "http://farm".$photo['farm'].".static.flickr.com/".$photo['server']."/".$photo['id']."_".$photo['secret'];
			$owner_url = "http://www.flickr.com/photos/".$photo['owner']."/".$photo['id'];
			echo "<li style=\"float: left; margin: 0 10px 10px 0;\">";
			echo "<a href='".$target_url.".jpg' title='click to post the picture to the content'>";
//echo "<a target='_blank' href='http://farm".$photo['farm'].".static.flickr.com/".$photo['server']."/".$photo['id']."_".$photo['secret'].".jpg' title='".$photo['title']."' id='get_image'>";
			echo  "<img id='get_image' src='".$target_url."_s.jpg' alt='".$owner_url."(__)".$photo['title']."(__)".$photo['ownername']."' />";
//echo  "<img id='get_image' src='http://farm".$photo['farm'].".static.flickr.com/".$photo['server']."/".$photo['id']."_".$photo['secret']."_s.jpg'>";
			echo "</a>";
			echo "</li>";
		}
		echo "<button id='moreButton' class='moreButton'>more</button>";



//$this->set('flickr_contents',$result);
//echo("<PRE>");
//var_dump($result);
//echo("</PRE>");
}


	function _get_editcontents($topic_array){
		$topic_title = $topic_array[0]['Topic']['name'];
		$topic_category = $topic_array[0]['Topic']['category'];
		$topic_description = $topic_array[0]['Topic']['description'];

		$contents_array = array();
		$contents_array[0]=array($topic_title,$topic_category,$topic_description);
		$i = $j = $k = 0;

		if(!empty($topic_array[0]['Title']) AND !empty($topic_array[0]['Content']) and !empty($topic_array[0]['Comment'])){
			//Title
			foreach($topic_array[0]['Title'] as $content_title_array){
				$ctitle_array[$i] = $content_title_array['title'];
				$i++;
			}

			//Content
			foreach($topic_array[0]['Content'] as $content_content_array){
				$ccontents_array[$j] = $content_content_array['content'];
				$j++;
			}

			//Comment
			foreach($topic_array[0]['Comment'] as $content_comment_array){
				$ccomment_array[$k] = $content_comment_array['comment'];
				$k++;
			}

			//size of array
			$title_num = count($ctitle_array);
			$content_num = count($ccontents_array);
			$comment_num = count($ccomment_array);
			$count_array = array($title_num,$content_num,$comment_num);
			$item_num = max($count_array);

			//combine the three arrays into one array
			//*first item of the array is Topic title, description, category
			for($l = 1; $l < $item_num+1; $l++){
				$contents_array[$l]=array($ctitle_array[$l-1],$ccontents_array[$l-1],$ccomment_array[$l-1]);
			}
		}

		return $contents_array;
	}

}
?>
